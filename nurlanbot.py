import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, ReplyKeyboardMarkup, KeyboardButton
from keep_alive import keep_alive

keep_alive()

API_TOKEN = '8486401103:AAGHrZKqnXlEGPh2xRZSDqCdoGS63tAn8ZA'  # –ë—É –µ—Ä–≥–∞ —û–∑ –±–æ—Ç —Ç–æ–∫–µ–Ω–∏–Ω–≥–∏–∑–Ω–∏ “õ—û–π–∏–Ω–≥
CHANNEL_ID = -1001513266536       # –ë—É –µ—Ä–≥–∞ –∫–∞–Ω–∞–ª ID “õ—û–π–∏–Ω–≥

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_data = {}

next_step_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ö–µ–π–∏–Ω–≥–∏—Å–∏–≥–∞ —û—Ç–∏—à", callback_data="next_step")]
])

ready_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–¢–∞–π—ë—Ä", callback_data="ready")]
])

restart_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/start")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    user_data[message.from_user.id] = {
        "photos": [],
        "description": None,
        "price": None,
    }
    await message.answer(
        "–°–∞–ª–æ–º! –ò–ª—Ç–∏–º–æ—Å 1 –¥–∞–Ω 8 —Ç–∞—Å–∏–≥–∞—á–∞ —Ñ–æ—Ç–æ–ª–∞—Ä–Ω–∏ —é–±–æ—Ä–∏–Ω–≥.\n"
        "“≤–∞—Ä –±–∏—Ä —Ñ–æ—Ç–æ–¥–∞–Ω —Å—û–Ω–≥ ¬´–ö–µ–π–∏–Ω–≥–∏—Å–∏–≥–∞ —û—Ç–∏—à¬ª —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω.",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(lambda m: m.photo)
async def handle_photos(message: types.Message):
    data = user_data.get(message.from_user.id)
    if data is None:
        await message.answer("–ò–ª—Ç–∏–º–æ—Å /start –±—É–π—Ä—É“ì–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥.")
        return

    if len(data["photos"]) >= 8:
        await message.answer("–ú–∞–∫—Å–∏–º—É–º 8 —Ç–∞ —Ñ–æ—Ç–æ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–∞–¥–∏. –≠–Ω–¥–∏ —Ñ–æ—Ç–æ–ª–∞—Ä–Ω–∏ —é–±–æ—Ä–∏—à–Ω–∏ —Ç—É–≥–∞—Ç–∏—à —É—á—É–Ω ¬´–ö–µ–π–∏–Ω–≥–∏—Å–∏–≥–∞ —û—Ç–∏—à¬ª —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.")
        return

    data["photos"].append(message.photo[-1].file_id)
    await message.answer(f"–§–æ—Ç–æ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏. “≤–æ–∑–∏—Ä–¥–∞ {len(data['photos'])} —Ç–∞ —Ñ–æ—Ç–æ –±–æ—Ä.", reply_markup=next_step_kb)

@dp.callback_query(lambda c: c.data == "next_step")
async def next_step_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = user_data.get(user_id)

    if not data or len(data["photos"]) == 0:
        await callback.message.answer("–ò–ª—Ç–∏–º–æ—Å, –∫–∞–º–∏–¥–∞ 1 —Ç–∞ —Ñ–æ—Ç–æ —é–±–æ—Ä–∏–Ω–≥.")
        await callback.answer()
        return

    await callback.message.answer("–ò–ª—Ç–∏–º–æ—Å, —ç—ä–ª–æ–Ω –º–∞—Ç–Ω–∏–Ω–∏ (üìù –ú–∞—Ç–Ω) –∫–∏—Ä–∏—Ç–∏–Ω–≥.")
    await callback.answer()

@dp.message(lambda m: not m.photo and user_data.get(m.from_user.id) and user_data[m.from_user.id]["description"] is None)
async def handle_description(message: types.Message):
    data = user_data[message.from_user.id]
    data["description"] = message.text
    await message.answer("–ù–∞—Ä—Ö–Ω–∏ (üí∞ –¶–µ–Ω–∞:) –∫–∏—Ä–∏—Ç–∏–Ω–≥.")

@dp.message(lambda m: not m.photo and user_data.get(m.from_user.id) and user_data[m.from_user.id]["description"] is not None and user_data[m.from_user.id]["price"] is None)
async def handle_price(message: types.Message):
    data = user_data[message.from_user.id]
    data["price"] = message.text
    await message.answer("–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä —Å–∞“õ–ª–∞–Ω–¥–∏. –≠—ä–ª–æ–Ω–Ω–∏ –∫–∞–Ω–∞–ª–≥–∞ –∂—û–Ω–∞—Ç–∏—à —É—á—É–Ω ¬´–¢–∞–π—ë—Ä¬ª —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.", reply_markup=ready_kb)

@dp.callback_query(lambda c: c.data == "ready")
async def send_ad_to_channel(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = user_data.get(user_id)

    if not data:
        await callback.message.answer("–ò–ª—Ç–∏–º–æ—Å /start –±—É–π—Ä—É“ì–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥.")
        await callback.answer()
        return

    media = [InputMediaPhoto(media=photo_id) for photo_id in data["photos"]]

    caption = (
        f"1) üìù {data['description']}\n\n"
        f"2) üí∞ –¶–µ–Ω–∞: {data['price']}\n\n"
        f"‚ùóÔ∏è–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã –µ—Å—Ç—å —Ç–æ:\n\n"
        f"3) ‚òéÔ∏è +998-(97)-757-13-53 –ù—É—Ä–ª–∞–Ω\n"
        f"4) üìç–ú–Ω–µ –Ω–∞–ø–∏—à–∏—Ç–µ:  @Nurlan_mebel"
    )

    try:
        if len(media) == 1:
            await bot.send_photo(CHANNEL_ID, media[0].media, caption=caption)
        else:
            media[0].caption = caption
            await bot.send_media_group(CHANNEL_ID, media)

        await callback.message.answer(
            "–≠—ä–ª–æ–Ω –∫–∞–Ω–∞–ª–≥–∞ –∂—û–Ω–∞—Ç–∏–ª–¥–∏!\n\n–Ø–Ω–∞ –±–∏—Ä —ç—ä–ª–æ–Ω —é–±–æ—Ä–∏—à —É—á—É–Ω /start –Ω–∏ –±–æ—Å–∏–Ω–≥.",
            reply_markup=restart_kb
        )

        user_data[user_id] = {
            "photos": [],
            "description": None,
            "price": None,
        }
    except Exception as e:
        await callback.message.answer(f"–•–∞—Ç–æ —é–∑ –±–µ—Ä–¥–∏: {e}")

    await callback.answer()

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))